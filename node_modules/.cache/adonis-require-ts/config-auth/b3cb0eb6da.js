"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const authConfig = {
    guard: 'web',
    guards: {
        web: {
            driver: 'session',
            provider: {
                driver: 'lucid',
                identifierKey: 'id',
                uids: ['email'],
                model: () => Promise.resolve().then(() => __importStar(global[Symbol.for('ioc.use')]('App/Models/User'))),
            },
        },
        basic: {
            driver: 'basic',
            realm: 'Login',
            provider: {
                driver: 'lucid',
                identifierKey: 'id',
                uids: ['email'],
                model: () => Promise.resolve().then(() => __importStar(global[Symbol.for('ioc.use')]('App/Models/User'))),
            },
        },
    },
};
exports.default = authConfig;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImF1dGgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWtCQSxNQUFNLFVBQVUsR0FBZTtJQUM3QixLQUFLLEVBQUUsS0FBSztJQUNaLE1BQU0sRUFBRTtRQVdOLEdBQUcsRUFBRTtZQUNILE1BQU0sRUFBRSxTQUFTO1lBRWpCLFFBQVEsRUFBRTtnQkFTUixNQUFNLEVBQUUsT0FBTztnQkFXZixhQUFhLEVBQUUsSUFBSTtnQkFZbkIsSUFBSSxFQUFFLENBQUMsT0FBTyxDQUFDO2dCQWFmLEtBQUssRUFBRSxHQUFHLEVBQUUseUVBQVEsaUJBQWlCLEdBQUM7YUFDdkM7U0FDRjtRQVlELEtBQUssRUFBRTtZQUNMLE1BQU0sRUFBRSxPQUFPO1lBQ2YsS0FBSyxFQUFFLE9BQU87WUFFZCxRQUFRLEVBQUU7Z0JBU1IsTUFBTSxFQUFFLE9BQU87Z0JBV2YsYUFBYSxFQUFFLElBQUk7Z0JBWW5CLElBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQztnQkFhZixLQUFLLEVBQUUsR0FBRyxFQUFFLHlFQUFRLGlCQUFpQixHQUFDO2FBQ3ZDO1NBQ0Y7S0FDRjtDQUNGLENBQUE7QUFFRCxrQkFBZSxVQUFVLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvbmZpZyBzb3VyY2U6IGh0dHBzOi8vZ2l0LmlvL0pZMG1wXG4gKlxuICogRmVlbCBmcmVlIHRvIGxldCB1cyBrbm93IHZpYSBQUiwgaWYgeW91IGZpbmQgc29tZXRoaW5nIGJyb2tlbiBpbiB0aGlzIGNvbmZpZ1xuICogZmlsZS5cbiAqL1xuXG5pbXBvcnQgdHlwZSB7IEF1dGhDb25maWcgfSBmcm9tICdAaW9jOkFkb25pcy9BZGRvbnMvQXV0aCdcblxuLypcbnwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxufCBBdXRoZW50aWNhdGlvbiBNYXBwaW5nXG58LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbnxcbnwgTGlzdCBvZiBhdmFpbGFibGUgYXV0aGVudGljYXRpb24gbWFwcGluZy4gWW91IG11c3QgZmlyc3QgZGVmaW5lIHRoZW1cbnwgaW5zaWRlIHRoZSBgY29udHJhY3RzL2F1dGgudHNgIGZpbGUgYmVmb3JlIG1lbnRpb25pbmcgdGhlbSBoZXJlLlxufFxuKi9cbmNvbnN0IGF1dGhDb25maWc6IEF1dGhDb25maWcgPSB7XG4gIGd1YXJkOiAnd2ViJyxcbiAgZ3VhcmRzOiB7XG4gICAgLypcbiAgICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICB8IFdlYiBHdWFyZFxuICAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIHxcbiAgICB8IFdlYiBndWFyZCB1c2VzIGNsYXNzaWMgb2xkIHNjaG9vbCBzZXNzaW9ucyBmb3IgYXV0aGVudGljYXRpbmcgdXNlcnMuXG4gICAgfCBJZiB5b3UgYXJlIGJ1aWxkaW5nIGEgc3RhbmRhcmQgd2ViIGFwcGxpY2F0aW9uLCBpdCBpcyByZWNvbW1lbmRlZCB0b1xuICAgIHwgdXNlIHdlYiBndWFyZCB3aXRoIHNlc3Npb24gZHJpdmVyXG4gICAgfFxuICAgICovXG4gICAgd2ViOiB7XG4gICAgICBkcml2ZXI6ICdzZXNzaW9uJyxcblxuICAgICAgcHJvdmlkZXI6IHtcbiAgICAgICAgLypcbiAgICAgICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIHwgRHJpdmVyXG4gICAgICAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICB8XG4gICAgICAgIHwgTmFtZSBvZiB0aGUgZHJpdmVyXG4gICAgICAgIHxcbiAgICAgICAgKi9cbiAgICAgICAgZHJpdmVyOiAnbHVjaWQnLFxuXG4gICAgICAgIC8qXG4gICAgICAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICB8IElkZW50aWZpZXIga2V5XG4gICAgICAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICB8XG4gICAgICAgIHwgVGhlIGlkZW50aWZpZXIga2V5IGlzIHRoZSB1bmlxdWUga2V5IG9uIHRoZSBtb2RlbC4gSW4gbW9zdCBjYXNlcyBzcGVjaWZ5aW5nXG4gICAgICAgIHwgdGhlIHByaW1hcnkga2V5IGlzIHRoZSByaWdodCBjaG9pY2UuXG4gICAgICAgIHxcbiAgICAgICAgKi9cbiAgICAgICAgaWRlbnRpZmllcktleTogJ2lkJyxcblxuICAgICAgICAvKlxuICAgICAgICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgfCBVaWRzXG4gICAgICAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICB8XG4gICAgICAgIHwgVWlkcyBhcmUgdXNlZCB0byBzZWFyY2ggYSB1c2VyIGFnYWluc3Qgb25lIG9mIHRoZSBtZW50aW9uZWQgY29sdW1ucy4gRHVyaW5nXG4gICAgICAgIHwgbG9naW4sIHRoZSBhdXRoIG1vZHVsZSB3aWxsIHNlYXJjaCB0aGUgdXNlciBtZW50aW9uZWQgdmFsdWUgYWdhaW5zdCBvbmVcbiAgICAgICAgfCBvZiB0aGUgbWVudGlvbmVkIGNvbHVtbnMgdG8gZmluZCB0aGVpciB1c2VyIHJlY29yZC5cbiAgICAgICAgfFxuICAgICAgICAqL1xuICAgICAgICB1aWRzOiBbJ2VtYWlsJ10sXG5cbiAgICAgICAgLypcbiAgICAgICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIHwgTW9kZWxcbiAgICAgICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIHxcbiAgICAgICAgfCBUaGUgbW9kZWwgdG8gdXNlIGZvciBmZXRjaGluZyBvciBmaW5kaW5nIHVzZXJzLiBUaGUgbW9kZWwgaXMgaW1wb3J0ZWRcbiAgICAgICAgfCBsYXppbHkgc2luY2UgdGhlIGNvbmZpZyBmaWxlcyBhcmUgcmVhZCB3YXkgZWFybGllciBpbiB0aGUgbGlmZWN5Y2xlXG4gICAgICAgIHwgb2YgYm9vdGluZyB0aGUgYXBwIGFuZCB0aGUgbW9kZWxzIG1heSBub3QgYmUgaW4gYSB1c2FibGUgc3RhdGUgYXRcbiAgICAgICAgfCB0aGF0IHRpbWUuXG4gICAgICAgIHxcbiAgICAgICAgKi9cbiAgICAgICAgbW9kZWw6ICgpID0+IGltcG9ydCgnQXBwL01vZGVscy9Vc2VyJyksXG4gICAgICB9LFxuICAgIH0sXG4gICAgLypcbiAgICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICB8IEJhc2ljIEF1dGggR3VhcmRcbiAgICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICB8XG4gICAgfCBVc2VzIEJhc2ljIGF1dGggdG8gYXV0aGVudGljYXRlIGFuIEhUVFAgcmVxdWVzdC4gVGhlcmUgaXMgbm8gY29uY2VwdCBvZlxuICAgIHwgXCJsb2dpblwiIGFuZCBcImxvZ291dFwiIHdpdGggYmFzaWMgYXV0aC4gWW91IGp1c3QgYXV0aGVudGljYXRlIHRoZSByZXF1ZXN0c1xuICAgIHwgdXNpbmcgYSBtaWRkbGV3YXJlIGFuZCBicm93c2VyIHdpbGwgcHJvbXB0IHRoZSB1c2VyIHRvIGVudGVyIHRoZWlyIGxvZ2luXG4gICAgfCBkZXRhaWxzXG4gICAgfFxuICAgICovXG4gICAgYmFzaWM6IHtcbiAgICAgIGRyaXZlcjogJ2Jhc2ljJyxcbiAgICAgIHJlYWxtOiAnTG9naW4nLFxuXG4gICAgICBwcm92aWRlcjoge1xuICAgICAgICAvKlxuICAgICAgICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgfCBEcml2ZXJcbiAgICAgICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIHxcbiAgICAgICAgfCBOYW1lIG9mIHRoZSBkcml2ZXJcbiAgICAgICAgfFxuICAgICAgICAqL1xuICAgICAgICBkcml2ZXI6ICdsdWNpZCcsXG5cbiAgICAgICAgLypcbiAgICAgICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIHwgSWRlbnRpZmllciBrZXlcbiAgICAgICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIHxcbiAgICAgICAgfCBUaGUgaWRlbnRpZmllciBrZXkgaXMgdGhlIHVuaXF1ZSBrZXkgb24gdGhlIG1vZGVsLiBJbiBtb3N0IGNhc2VzIHNwZWNpZnlpbmdcbiAgICAgICAgfCB0aGUgcHJpbWFyeSBrZXkgaXMgdGhlIHJpZ2h0IGNob2ljZS5cbiAgICAgICAgfFxuICAgICAgICAqL1xuICAgICAgICBpZGVudGlmaWVyS2V5OiAnaWQnLFxuXG4gICAgICAgIC8qXG4gICAgICAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICB8IFVpZHNcbiAgICAgICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIHxcbiAgICAgICAgfCBVaWRzIGFyZSB1c2VkIHRvIHNlYXJjaCBhIHVzZXIgYWdhaW5zdCBvbmUgb2YgdGhlIG1lbnRpb25lZCBjb2x1bW5zLiBEdXJpbmdcbiAgICAgICAgfCBsb2dpbiwgdGhlIGF1dGggbW9kdWxlIHdpbGwgc2VhcmNoIHRoZSB1c2VyIG1lbnRpb25lZCB2YWx1ZSBhZ2FpbnN0IG9uZVxuICAgICAgICB8IG9mIHRoZSBtZW50aW9uZWQgY29sdW1ucyB0byBmaW5kIHRoZWlyIHVzZXIgcmVjb3JkLlxuICAgICAgICB8XG4gICAgICAgICovXG4gICAgICAgIHVpZHM6IFsnZW1haWwnXSxcblxuICAgICAgICAvKlxuICAgICAgICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgfCBNb2RlbFxuICAgICAgICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgfFxuICAgICAgICB8IFRoZSBtb2RlbCB0byB1c2UgZm9yIGZldGNoaW5nIG9yIGZpbmRpbmcgdXNlcnMuIFRoZSBtb2RlbCBpcyBpbXBvcnRlZFxuICAgICAgICB8IGxhemlseSBzaW5jZSB0aGUgY29uZmlnIGZpbGVzIGFyZSByZWFkIHdheSBlYXJsaWVyIGluIHRoZSBsaWZlY3ljbGVcbiAgICAgICAgfCBvZiBib290aW5nIHRoZSBhcHAgYW5kIHRoZSBtb2RlbHMgbWF5IG5vdCBiZSBpbiBhIHVzYWJsZSBzdGF0ZSBhdFxuICAgICAgICB8IHRoYXQgdGltZS5cbiAgICAgICAgfFxuICAgICAgICAqL1xuICAgICAgICBtb2RlbDogKCkgPT4gaW1wb3J0KCdBcHAvTW9kZWxzL1VzZXInKSxcbiAgICAgIH0sXG4gICAgfSxcbiAgfSxcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXV0aENvbmZpZ1xuIl19