"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Kela_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Kela"));
class KelasController {
    async index({ view, auth }) {
        const kelas = await Kela_1.default.query().where({ dihapus: 0 });
        const user = await auth?.user?.toJSON();
        console.log(user);
        const listKelas = kelas.map((d, idx) => {
            return { ...d.toJSON(), idx: idx + 1 };
        });
        return view.render("kelas.index", {
            kelas: listKelas,
            nama_admin: "Raihan",
        });
    }
    async store({ request, response }) {
        const { nama, kode, guru } = request.all();
        await Kela_1.default.create({
            nama,
            kode,
            namaGuru: guru,
            dihapus: 0,
        });
        return response.redirect("/kelas");
    }
    async show({ view, params }) {
        const id = params.id;
        const kelas = await Kela_1.default.query()
            .where({ dihapus: 0 })
            .andWhere({ id })
            .firstOrFail();
        return view.render("kelas.show", { kelas });
    }
    async update({ request, response, params, session, }) {
        const { nama, kode, guru } = request.all();
        const id = params.id;
        await Kela_1.default.query().where({ id }).update({
            nama,
            kode,
            namaGuru: guru,
            dihapus: 0,
        });
        session.flash({ notifivation: "Data Berhasil Diupdate!" });
        return response.redirect(`/kelas/${id}`);
    }
    async delete({ response, params, session }) {
        const id = params.id;
        await Kela_1.default.query().where({ id }).update({
            dihapus: 1,
        });
        session.flash({ notifivation: "Data Berhasil Diupdate!" });
        return response.redirect(`/kelas`);
    }
}
exports.default = KelasController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiS2VsYXNDb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiS2VsYXNDb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsaUZBQW1DO0FBRW5DLE1BQXFCLGVBQWU7SUFDM0IsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQXVCO1FBQ3BELE1BQU0sS0FBSyxHQUFHLE1BQU0sY0FBSSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRXZELE1BQU0sSUFBSSxHQUFHLE1BQU0sSUFBSSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQztRQUN4QyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRWxCLE1BQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUU7WUFDckMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDekMsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFO1lBQ2hDLEtBQUssRUFBRSxTQUFTO1lBQ2hCLFVBQVUsRUFBRSxRQUFRO1NBQ3JCLENBQUMsQ0FBQztJQUNMLENBQUM7SUFDTSxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBdUI7UUFDM0QsTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEdBQUcsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBRTNDLE1BQU0sY0FBSSxDQUFDLE1BQU0sQ0FBQztZQUNoQixJQUFJO1lBQ0osSUFBSTtZQUNKLFFBQVEsRUFBRSxJQUFJO1lBQ2QsT0FBTyxFQUFFLENBQUM7U0FDWCxDQUFDLENBQUM7UUFFSCxPQUFPLFFBQVEsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUNNLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUF1QjtRQUNyRCxNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDO1FBQ3JCLE1BQU0sS0FBSyxHQUFHLE1BQU0sY0FBSSxDQUFDLEtBQUssRUFBRTthQUM3QixLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUM7YUFDckIsUUFBUSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUM7YUFDaEIsV0FBVyxFQUFFLENBQUM7UUFFakIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUNNLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFDbEIsT0FBTyxFQUNQLFFBQVEsRUFDUixNQUFNLEVBQ04sT0FBTyxHQUNhO1FBQ3BCLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxHQUFHLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUMzQyxNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDO1FBRXJCLE1BQU0sY0FBSSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDO1lBQ3RDLElBQUk7WUFDSixJQUFJO1lBQ0osUUFBUSxFQUFFLElBQUk7WUFDZCxPQUFPLEVBQUUsQ0FBQztTQUNYLENBQUMsQ0FBQztRQUNILE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxZQUFZLEVBQUUseUJBQXlCLEVBQUUsQ0FBQyxDQUFDO1FBRTNELE9BQU8sUUFBUSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVNLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBdUI7UUFDcEUsTUFBTSxFQUFFLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQztRQUVyQixNQUFNLGNBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQztZQUN0QyxPQUFPLEVBQUUsQ0FBQztTQUNYLENBQUMsQ0FBQztRQUNILE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxZQUFZLEVBQUUseUJBQXlCLEVBQUUsQ0FBQyxDQUFDO1FBRTNELE9BQU8sUUFBUSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNyQyxDQUFDO0NBQ0Y7QUFuRUQsa0NBbUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBIdHRwQ29udGV4dENvbnRyYWN0IH0gZnJvbSBcIkBpb2M6QWRvbmlzL0NvcmUvSHR0cENvbnRleHRcIjtcbmltcG9ydCBLZWxhIGZyb20gXCJBcHAvTW9kZWxzL0tlbGFcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgS2VsYXNDb250cm9sbGVyIHtcbiAgcHVibGljIGFzeW5jIGluZGV4KHsgdmlldywgYXV0aCB9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XG4gICAgY29uc3Qga2VsYXMgPSBhd2FpdCBLZWxhLnF1ZXJ5KCkud2hlcmUoeyBkaWhhcHVzOiAwIH0pO1xuXG4gICAgY29uc3QgdXNlciA9IGF3YWl0IGF1dGg/LnVzZXI/LnRvSlNPTigpO1xuICAgIGNvbnNvbGUubG9nKHVzZXIpO1xuXG4gICAgY29uc3QgbGlzdEtlbGFzID0ga2VsYXMubWFwKChkLCBpZHgpID0+IHtcbiAgICAgIHJldHVybiB7IC4uLmQudG9KU09OKCksIGlkeDogaWR4ICsgMSB9O1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHZpZXcucmVuZGVyKFwia2VsYXMuaW5kZXhcIiwge1xuICAgICAga2VsYXM6IGxpc3RLZWxhcyxcbiAgICAgIG5hbWFfYWRtaW46IFwiUmFpaGFuXCIsXG4gICAgfSk7XG4gIH1cbiAgcHVibGljIGFzeW5jIHN0b3JlKHsgcmVxdWVzdCwgcmVzcG9uc2UgfTogSHR0cENvbnRleHRDb250cmFjdCkge1xuICAgIGNvbnN0IHsgbmFtYSwga29kZSwgZ3VydSB9ID0gcmVxdWVzdC5hbGwoKTtcblxuICAgIGF3YWl0IEtlbGEuY3JlYXRlKHtcbiAgICAgIG5hbWEsXG4gICAgICBrb2RlLFxuICAgICAgbmFtYUd1cnU6IGd1cnUsXG4gICAgICBkaWhhcHVzOiAwLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlLnJlZGlyZWN0KFwiL2tlbGFzXCIpO1xuICB9XG4gIHB1YmxpYyBhc3luYyBzaG93KHsgdmlldywgcGFyYW1zIH06IEh0dHBDb250ZXh0Q29udHJhY3QpIHtcbiAgICBjb25zdCBpZCA9IHBhcmFtcy5pZDtcbiAgICBjb25zdCBrZWxhcyA9IGF3YWl0IEtlbGEucXVlcnkoKVxuICAgICAgLndoZXJlKHsgZGloYXB1czogMCB9KVxuICAgICAgLmFuZFdoZXJlKHsgaWQgfSlcbiAgICAgIC5maXJzdE9yRmFpbCgpO1xuXG4gICAgcmV0dXJuIHZpZXcucmVuZGVyKFwia2VsYXMuc2hvd1wiLCB7IGtlbGFzIH0pO1xuICB9XG4gIHB1YmxpYyBhc3luYyB1cGRhdGUoe1xuICAgIHJlcXVlc3QsXG4gICAgcmVzcG9uc2UsXG4gICAgcGFyYW1zLFxuICAgIHNlc3Npb24sXG4gIH06IEh0dHBDb250ZXh0Q29udHJhY3QpIHtcbiAgICBjb25zdCB7IG5hbWEsIGtvZGUsIGd1cnUgfSA9IHJlcXVlc3QuYWxsKCk7XG4gICAgY29uc3QgaWQgPSBwYXJhbXMuaWQ7XG5cbiAgICBhd2FpdCBLZWxhLnF1ZXJ5KCkud2hlcmUoeyBpZCB9KS51cGRhdGUoe1xuICAgICAgbmFtYSxcbiAgICAgIGtvZGUsXG4gICAgICBuYW1hR3VydTogZ3VydSxcbiAgICAgIGRpaGFwdXM6IDAsXG4gICAgfSk7XG4gICAgc2Vzc2lvbi5mbGFzaCh7IG5vdGlmaXZhdGlvbjogXCJEYXRhIEJlcmhhc2lsIERpdXBkYXRlIVwiIH0pO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlLnJlZGlyZWN0KGAva2VsYXMvJHtpZH1gKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBkZWxldGUoeyByZXNwb25zZSwgcGFyYW1zLCBzZXNzaW9uIH06IEh0dHBDb250ZXh0Q29udHJhY3QpIHtcbiAgICBjb25zdCBpZCA9IHBhcmFtcy5pZDtcblxuICAgIGF3YWl0IEtlbGEucXVlcnkoKS53aGVyZSh7IGlkIH0pLnVwZGF0ZSh7XG4gICAgICBkaWhhcHVzOiAxLFxuICAgIH0pO1xuICAgIHNlc3Npb24uZmxhc2goeyBub3RpZml2YXRpb246IFwiRGF0YSBCZXJoYXNpbCBEaXVwZGF0ZSFcIiB9KTtcblxuICAgIHJldHVybiByZXNwb25zZS5yZWRpcmVjdChgL2tlbGFzYCk7XG4gIH1cbn1cbiJdfQ==